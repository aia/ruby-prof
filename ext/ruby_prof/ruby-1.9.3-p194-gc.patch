diff -Naur ruby-1.9.3-p194/gc.c ruby-1.9.3-p194-gcpatch/gc.c
--- ruby-1.9.3-p194/gc.c	2012-02-22 00:57:21.000000000 -0800
+++ ruby-1.9.3-p194-gcpatch/gc.c	2012-05-28 19:53:45.000000000 -0700
@@ -319,7 +319,7 @@
     struct gc_list *next;
 };
 
-#define CALC_EXACT_MALLOC_SIZE 0
+#define CALC_EXACT_MALLOC_SIZE 1
 
 typedef struct rb_objspace {
     struct {
@@ -730,7 +730,7 @@
     if (size == 0) size = 1;
 
 #if CALC_EXACT_MALLOC_SIZE
-    size += sizeof(size_t);
+    // size += sizeof(size_t);
 #endif
 
     if ((ruby_gc_stress && !ruby_disable_gc_stress) ||
@@ -749,8 +749,8 @@
 #if CALC_EXACT_MALLOC_SIZE
     objspace->malloc_params.allocated_size += size;
     objspace->malloc_params.allocations++;
-    ((size_t *)mem)[0] = size;
-    mem = (size_t *)mem + 1;
+    //((size_t *)mem)[0] = size;
+    //mem = (size_t *)mem + 1;
 #endif
 
     return mem;
@@ -791,9 +791,9 @@
 	garbage_collect_with_gvl(objspace);
 
 #if CALC_EXACT_MALLOC_SIZE
-    size += sizeof(size_t);
+    //size += sizeof(size_t);
     objspace->malloc_params.allocated_size -= size;
-    ptr = (size_t *)ptr - 1;
+    //ptr = (size_t *)ptr - 1;
 #endif
 
     mem = realloc(ptr, size);
@@ -809,8 +809,8 @@
 
 #if CALC_EXACT_MALLOC_SIZE
     objspace->malloc_params.allocated_size += size;
-    ((size_t *)mem)[0] = size;
-    mem = (size_t *)mem + 1;
+    //((size_t *)mem)[0] = size;
+    //mem = (size_t *)mem + 1;
 #endif
 
     return mem;
@@ -820,11 +820,11 @@
 vm_xfree(rb_objspace_t *objspace, void *ptr)
 {
 #if CALC_EXACT_MALLOC_SIZE
-    size_t size;
-    ptr = ((size_t *)ptr) - 1;
-    size = ((size_t*)ptr)[0];
-    objspace->malloc_params.allocated_size -= size;
-    objspace->malloc_params.allocations--;
+    //size_t size;
+    //ptr = ((size_t *)ptr) - 1;
+    //size = ((size_t*)ptr)[0];
+    //objspace->malloc_params.allocated_size -= size;
+    //objspace->malloc_params.allocations--;
 #endif
 
     free(ptr);
@@ -3391,7 +3391,14 @@
 static VALUE
 gc_malloc_allocated_size(VALUE self)
 {
-    return UINT2NUM((&rb_objspace)->malloc_params.allocated_size);
+    //return UINT2NUM((&rb_objspace)->malloc_params.allocated_size);
+    return UINT2NUM(malloc_allocated_size());
+}
+
+VALUE
+malloc_allocated_size(void)
+{
+    return (&rb_objspace)->malloc_params.allocated_size;
 }
 
 /*
@@ -3406,7 +3413,14 @@
 static VALUE
 gc_malloc_allocations(VALUE self)
 {
-    return UINT2NUM((&rb_objspace)->malloc_params.allocations);
+    //return UINT2NUM((&rb_objspace)->malloc_params.allocations);
+    return UINT2NUM(malloc_allocations());
+}
+
+VALUE
+malloc_allocations(void)
+{
+    return (&rb_objspace)->malloc_params.allocations;
 }
 #endif
 
diff -Naur ruby-1.9.3-p194/include/ruby/intern.h ruby-1.9.3-p194-gcpatch/include/ruby/intern.h
--- ruby-1.9.3-p194/include/ruby/intern.h	2012-02-08 05:30:04.000000000 -0800
+++ ruby-1.9.3-p194-gcpatch/include/ruby/intern.h	2012-05-28 19:54:00.000000000 -0700
@@ -431,6 +431,8 @@
 VALUE rb_gc_enable(void);
 VALUE rb_gc_disable(void);
 VALUE rb_gc_start(void);
+VALUE malloc_allocated_size(void);
+VALUE malloc_allocations(void);
 #define Init_stack(addr) ruby_init_stack(addr)
 void rb_gc_set_params(void);
 /* hash.c */
diff -Naur ruby-1.9.3-p194/vm_core.h ruby-1.9.3-p194-gcpatch/vm_core.h
--- ruby-1.9.3-p194/vm_core.h	2011-12-29 21:56:53.000000000 -0800
+++ ruby-1.9.3-p194-gcpatch/vm_core.h	2012-05-28 19:54:00.000000000 -0700
@@ -682,7 +682,11 @@
 /* for thread */
 
 #if RUBY_VM_THREAD_MODEL == 2
+#if defined __GNUC__ && __GNUC__ >= 4
+#pragma GCC visibility push(default)
 RUBY_EXTERN rb_thread_t *ruby_current_thread;
+#pragma GCC visibility pop
+#endif
 extern rb_vm_t *ruby_current_vm;
 
 #define GET_VM() ruby_current_vm
